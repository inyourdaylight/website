{"ast":null,"code":"import { createElementVNode as _createElementVNode, Transition as _Transition, createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../assets/halfsun.svg';\nimport _imports_1 from '../assets/IYD-White-Small.svg';\nimport _imports_2 from '../assets/glow-sphere.svg';\nimport _imports_3 from '../assets/hamburger.svg';\nconst _withScopeId = n => (_pushScopeId(\"data-v-0cdfc2ec\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"nav\"\n};\nconst _hoisted_2 = {\n  class: \"time\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"sun\",\n  src: _imports_0\n})], -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"logo\"\n}, [/*#__PURE__*/_createElementVNode(\"a\", {\n  href: \"/\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_1\n})])], -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"scrollbar\",\n  ref: \"scrollbar\"\n};\nconst _hoisted_6 = {\n  src: _imports_2,\n  ref: \"glow\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"hamburger\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_3\n})], -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", _hoisted_2, [_hoisted_3, _createVNode(_Transition), _createElementVNode(\"span\", null, _toDisplayString($data.hour) + \":\" + _toDisplayString($data.minute), 1 /* TEXT */)]), _hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"img\", _hoisted_6, null, 512 /* NEED_PATCH */)], 512 /* NEED_PATCH */), _hoisted_7]);\n}","map":{"version":3,"mappings":";OAG6BA,UAA2B;OAM3CC,UAAmC;OAIrCC,UAA+B;OAG/BC,UAA6B;;;EAfjCC,KAAK,EAAC;AAAK;;EACXA,KAAK,EAAC;AAAM;gEACbC,oBAA2D,4BAArDA,oBAA8C;EAAzCD,KAAK,EAAC,KAAK;EAACE,GAA2B,EAA3BN;;gEAIzBK,oBAIM;EAJDD,KAAK,EAAC;AAAM,iBACfC,oBAEI;EAFDE,IAAI,EAAC;AAAG,iBACTF,oBAA0C;EAArCC,GAAmC,EAAnCL;AAAmC;;EAGvCG,KAAK,EAAC,WAAW;EAACI,GAAG,EAAC;;;EACpBF,GAA+B,EAA/BJ,UAA+B;EAACM,GAAG,EAAC;;gEAE3CH,oBAEM;EAFDD,KAAK,EAAC;AAAW,iBACpBC,oBAAoC;EAA/BC,GAA6B,EAA7BH;AAA6B;;;uBAftCM,oBAiBM,OAjBNC,UAiBM,GAhBJL,oBAII,KAJJM,UAII,GAHFC,UAA2D,EAC3DC,aAAyBC,cACzBT,oBAAiC,+BAAzBU,UAAI,IAAE,GAAC,oBAAGA,YAAM,oBAE1BC,UAIM,EACNX,oBAEM,OAFNY,UAEM,GADJZ,oBAAiD,OAAjDa,UAAiD,uDAEnDC,UAEM","names":["_imports_0","_imports_1","_imports_2","_imports_3","class","_createElementVNode","src","href","ref","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_Transition","$data","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7"],"sourceRoot":"","sources":["/Users/rebj/Sites/inyourdaylight/src/components/NavSticky.vue"],"sourcesContent":["<template>\n  <div class=\"nav\">\n    <p class=\"time\">\n      <span><img class=\"sun\" src=\"../assets/halfsun.svg\"/></span>\n      <transition></transition>\n      <span>{{hour}}:{{ minute}}</span>\n    </p>\n    <div class=\"logo\">\n      <a href=\"/\">\n        <img src=\"../assets/IYD-White-Small.svg\"/>\n      </a>\n    </div>\n    <div class=\"scrollbar\" ref=\"scrollbar\">\n      <img src=\"../assets/glow-sphere.svg\" ref=\"glow\"/>\n    </div>\n    <div class=\"hamburger\">\n      <img src=\"../assets/hamburger.svg\"/>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: 'NavSticky',\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      this.$refs.glow.style = `top: ${scrollPos * ((this.scrollBarHeight - (glowSize) / 2) / this.scrollLimit)}px`\n    }\n  },\n  methods: {\n    getTime() {\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours();\n    },\n  },\n  data() {\n    return {\n      date: new Date,\n      scrollBarHeight: 0,\n      minute:0,\n      hour:0\n    }\n  },\n  \n  mounted() {\n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000;\n    console.log(countdownTilMinuteInterval);\n    setTimeout(() => {\n      console.log(\"minute change\");\n      this.getTime();\n    }, countdownTilMinuteInterval)\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n@import \"../styles.scss\";\n.time {\n  color: $gold;\n  position: fixed;\n  top: 20px;\n  left: 20px;\n  .sun {\n    height: 20px;\n    padding-right: 5px;\n  }\n}\n.logo {\n  position: fixed;\n  left: 50%;\n  top: 20px;\n  transform: translateX(-50%);\n  img {\n    max-width: 100px;\n  }\n}\n.scrollbar {\n  position: fixed;\n  right: 30px;\n  height: 50vh;\n  border-right: 1px solid white;\n  top: 50%;\n  transform: translateY(-50%);\n  img {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    top: 0;\n  }\n}\n.hamburger {\n  position: fixed;\n  right: 20px;\n  top: 30px;\n  img {\n    width: 30px;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}