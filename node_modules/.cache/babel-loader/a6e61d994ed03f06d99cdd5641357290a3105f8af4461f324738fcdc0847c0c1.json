{"ast":null,"code":"import TimeSun from './TimeSun.vue';\nimport { gsap } from \"gsap\";\nimport { toRaw } from 'vue';\nexport default {\n  name: 'HeaderNav',\n  components: {\n    TimeSun\n  },\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    },\n    showNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      this.$refs.glow.style = `top: ${scrollPos * ((this.scrollBarHeight - glowSize / 2) / this.scrollLimit)}px`;\n    }\n    // showNav(showNav) {\n    // }\n  },\n\n  methods: {\n    getTime() {\n      this.date = new Date();\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours().toString();\n    },\n    hamburgerAnimate() {\n      toRaw(this.timeline).to(\".top\", {\n        rotation: 45,\n        duration: 5\n      });\n    }\n  },\n  data() {\n    return {\n      date: new Date(),\n      scrollBarHeight: 0,\n      minute: 0,\n      hour: 0,\n      timeline: new gsap.timeline({\n        repeat: -1\n      })\n    };\n  },\n  mounted() {\n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000 + this.date.getMilliseconds();\n    setTimeout(() => {\n      this.getTime();\n      setInterval(() => {\n        this.getTime();\n      }, 60000);\n    }, countdownTilMinuteInterval);\n  }\n};","map":{"version":3,"mappings":"AA0BA,OAAOA,OAAM,MAAO,eAAe;AACnC,SAASC,IAAG,QAAS,MAAM;AAC3B,SAASC,KAAI,QAAS,KAAK;AAC3B,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;IACVJ;EACF,CAAC;EACDK,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDC,SAAS,EAAE;MACTH,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE;IACX,CAAC;IACDE,OAAO,EAAE;MACPJ,IAAI,EAAEK,OAAO;MACbH,OAAO,EAAE;IACX;EACF,CAAC;EACDI,KAAK,EAAE;IACLH,SAAS,CAACA,SAAS,EAAE;MACnB,IAAII,QAAO,GAAI,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,qBAAqB,EAAE,CAACC,MAAM;MAC7D,IAAI,CAACH,KAAK,CAACC,IAAI,CAACG,KAAI,GAAK,QAAOT,SAAQ,IAAK,CAAC,IAAI,CAACU,eAAc,GAAKN,QAAQ,GAAI,CAAC,IAAI,IAAI,CAACR,WAAW,CAAE,IAAE;IAC7G;IACA;IACA;EACF,CAAC;;EACDe,OAAO,EAAE;IACPC,OAAO,GAAG;MACR,IAAI,CAACC,IAAG,GAAI,IAAIC,IAAI,EAAE;MACtB,IAAI,CAACC,MAAK,GAAI,IAAI,CAACF,IAAI,CAACG,UAAU,EAAE,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAChE,IAAI,CAACC,IAAG,GAAI,IAAI,CAACN,IAAI,CAACO,QAAQ,EAAE,CAACH,QAAQ,EAAE;IAC7C,CAAC;IACDI,gBAAgB,GAAG;MACjB7B,KAAK,CAAC,IAAI,CAAC8B,QAAQ,CAAC,CAACC,EAAE,CAAC,MAAM,EAAE;QAACC,QAAQ,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAC,CAAC,CAAC;IAC9D;EACF,CAAC;EACDC,IAAI,GAAG;IACL,OAAO;MACLb,IAAI,EAAE,IAAIC,IAAI,EAAE;MAChBJ,eAAe,EAAE,CAAC;MAClBK,MAAM,EAAC,CAAC;MACRI,IAAI,EAAC,CAAC;MACNG,QAAQ,EAAE,IAAI/B,IAAI,CAAC+B,QAAQ,CAAC;QAACK,MAAM,EAAE,CAAC;MAAC,CAAC;IAC1C;EACF,CAAC;EAEDC,OAAO,GAAG;IACR,IAAI,CAAChB,OAAO,EAAE;IACd,IAAI,CAACF,eAAc,GAAI,IAAI,CAACL,KAAK,CAACwB,SAAS,CAACtB,qBAAqB,EAAE,CAACC,MAAM;IAC1E,IAAIsB,0BAAyB,GAAI,CAAC,EAAC,GAAI,IAAI,CAACjB,IAAI,CAACkB,UAAU,EAAE,IAAI,IAAG,GAAI,IAAI,CAAClB,IAAI,CAACmB,eAAe,EAAE;IAEnGC,UAAU,CAAC,MAAM;MACf,IAAI,CAACrB,OAAO,EAAE;MACdsB,WAAW,CAAC,MAAM;QAChB,IAAI,CAACtB,OAAO,EAAE;MAChB,CAAC,EAAE,KAAK,CAAC;IACX,CAAC,EAAEkB,0BAA0B;EAC/B;AACF","names":["TimeSun","gsap","toRaw","name","components","props","scrollLimit","type","Number","default","scrollPos","showNav","Boolean","watch","glowSize","$refs","glow","getBoundingClientRect","height","style","scrollBarHeight","methods","getTime","date","Date","minute","getMinutes","toString","padStart","hour","getHours","hamburgerAnimate","timeline","to","rotation","duration","data","repeat","mounted","scrollbar","countdownTilMinuteInterval","getSeconds","getMilliseconds","setTimeout","setInterval"],"sourceRoot":"","sources":["/Users/rebj/Sites/inyourdaylight/src/components/HeaderNav.vue"],"sourcesContent":["<template>\n  <div class=\"nav\">\n    <transition :key=\"hour+minute\" appear>\n      <p :class=\"`time ${showNav ? `blue` : ``}`\">\n        <TimeSun class=\"sun\" :color=\"showNav ? `#1B2227` : ``\"></TimeSun>\n        <span v-html=\"hour\"></span>:<span v-html=\"minute\"></span>\n      </p>\n    </transition>\n    <div class=\"logo\">\n      <a href=\"/\">\n        <img src=\"../assets/IYD-White-Small.svg\"/>\n      </a>\n    </div>\n    <div class=\"scrollbar\" ref=\"scrollbar\">\n      <img src=\"../assets/glow-sphere.svg\" ref=\"glow\"/>\n    </div>\n    <div class=\"hamburger\" id=\"hamburgerMenu\">\n      <div class=\"line top\"></div>\n      <div class=\"line mid\"></div>\n      <div class=\"line bot\"></div>\n    </div>\n  \n  </div>\n</template>\n\n<script>\nimport TimeSun from './TimeSun.vue';\nimport { gsap } from \"gsap\";\nimport { toRaw } from 'vue';\nexport default {\n  name: 'HeaderNav',\n  components: {\n    TimeSun\n  },\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    },\n    showNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      this.$refs.glow.style = `top: ${scrollPos * ((this.scrollBarHeight - (glowSize) / 2) / this.scrollLimit)}px`\n    },\n    // showNav(showNav) {\n    // }\n  },\n  methods: {\n    getTime() {\n      this.date = new Date();\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours().toString();\n    },\n    hamburgerAnimate() {\n      toRaw(this.timeline).to(\".top\", {rotation: 45, duration: 5});\n    }\n  },\n  data() {\n    return {\n      date: new Date(),\n      scrollBarHeight: 0,\n      minute:0,\n      hour:0,\n      timeline: new gsap.timeline({repeat: -1})\n    }\n  },\n  \n  mounted() {\n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000 + this.date.getMilliseconds();\n\n    setTimeout(() => {\n      this.getTime();\n      setInterval(() => {\n        this.getTime();\n      }, 60000);\n    }, countdownTilMinuteInterval)\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n@import \"../styles.scss\";\n.time {\n  color: $gold;\n  position: fixed;\n  z-index: 10;\n  top: 20px;\n  transition: all .5s ease .5s;\n  left: 20px;\n  .sun {\n    display: inline-block;\n    min-width: 40px;\n    padding-right: 5px;\n    transition: all .5s ease .5s;\n  }\n}\n.blue {\n  color: #1B2227;\n  transition: all .5s ease .5s;\n}\n.logo {\n  position: fixed;\n  left: 50%;\n  top: 20px;\n  transform: translateX(-50%);\n  z-index: 10;\n  img {\n    max-width: 100px;\n  }\n}\n.scrollbar {\n  position: fixed;\n  right: 30px;\n  height: 50vh;\n  border-right: 1px solid white;\n  top: 50%;\n  transform: translateY(-50%);\n  img {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    top: 0;\n  }\n}\n.hamburger {\n  position: fixed;\n  right: 20px;\n  top: 30px;\n  z-index: 10;\n  cursor: pointer;\n  img {\n    width: 30px;\n  }\n}\n\n.line {\n  pointer-events: none;\n  width: 30px;\n  height: 1px;\n  margin-bottom: 6px;\n  border-top: 1px solid white;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}