{"ast":null,"code":"import TimeSun from './TimeSun.vue';\nimport { gsap } from \"gsap\";\nimport { toRaw } from 'vue';\nexport default {\n  name: 'HeaderNav',\n  components: {\n    TimeSun\n  },\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    },\n    showNav: {\n      type: Boolean,\n      default: false\n    },\n    navColor: {\n      type: String,\n      default: \"darkNav\"\n    },\n    clickEvents: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      // let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      document.getElementsByClassName(\"scroll-handle\")[0].style = `transform: translateY(${scrollPos * (this.scrollBarHeight / this.scrollLimit)}px) translateX(-50%)`;\n    },\n    clickEvents(e) {\n      this.scroller(e);\n    },\n    showNav(showNav) {\n      if (showNav) {\n        this.hamburgerAnimate();\n      } else {\n        toRaw(this.timeline).reverse();\n      }\n    }\n    // navColor(e) {\n    //   console.log(e);\n    // }\n  },\n\n  methods: {\n    scroller(e) {\n      // console.log(e.target.className);\n\n      if (e.target.className.includes(\"scroll-handle\")) {\n        window.addEventListener(\"mousemove\", this.scrollDrag);\n        window.addEventListener(\"mouseup\", this.removeScrollDrag);\n      }\n    },\n    scrollDrag(e) {\n      let scrollbarTop = this.$refs.scrollbar.getBoundingClientRect().top;\n      let scrollbarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n      let move = Math.min(Math.max(e.clientY - scrollbarTop, 0), scrollbarHeight);\n      document.getElementsByClassName(\"scroll-handle\")[0].style = `transform: translateY(${move}px) translateX(-50%);`;\n      window.scrollTo(0, move * (this.scrollLimit / scrollbarHeight));\n    },\n    removeScrollDrag() {\n      window.removeEventListener(\"mousemove\", this.scrollDrag);\n    },\n    getTime() {\n      this.date = new Date();\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours().toString();\n    },\n    hamburgerAnimate() {\n      toRaw(this.timeline).restart();\n      toRaw(this.timeline).to(\".top\", {\n        rotation: 45,\n        duration: 1,\n        y: 8,\n        borderTop: \"1px solid #1B2227\"\n      }, 0);\n      toRaw(this.timeline).to(\".mid\", {\n        width: 0,\n        duration: 1,\n        borderTop: \"1px solid #1B2227\"\n      }, 0);\n      toRaw(this.timeline).to(\".bot\", {\n        rotation: -45,\n        duration: 1,\n        y: -8,\n        borderTop: \"1px solid #1B2227\"\n      }, 0);\n    }\n  },\n  data() {\n    return {\n      date: new Date(),\n      scrollBarHeight: 0,\n      minute: 0,\n      hour: 0,\n      timeline: new gsap.timeline(),\n      menuleft: [],\n      menuright: []\n    };\n  },\n  mounted() {\n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000 + this.date.getMilliseconds();\n    this.$nextTick(() => {\n      // this.menuleft = this.$cms.nav.split(Math.ceil($cms.nav.length / 2));\n      this.menuleft = [...this.$cms.nav].splice(0, Math.ceil(this.$cms.nav.length / 2));\n      this.menuright = [...this.$cms.nav].splice(Math.ceil(this.$cms.nav.length / 2));\n    });\n    setTimeout(() => {\n      this.getTime();\n      setInterval(() => {\n        this.getTime();\n      }, 60000);\n    }, countdownTilMinuteInterval);\n  }\n};","map":{"version":3,"mappings":"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","names":["TimeSun","gsap","toRaw","name","components","props","scrollLimit","type","Number","default","scrollPos","showNav","Boolean","navColor","String","clickEvents","Object","watch","document","getElementsByClassName","style","scrollBarHeight","e","scroller","hamburgerAnimate","timeline","reverse","methods","target","className","includes","window","addEventListener","scrollDrag","removeScrollDrag","scrollbarTop","$refs","scrollbar","getBoundingClientRect","top","scrollbarHeight","height","move","Math","min","max","clientY","scrollTo","removeEventListener","getTime","date","Date","minute","getMinutes","toString","padStart","hour","getHours","restart","to","rotation","duration","y","borderTop","width","data","menuleft","menuright","mounted","countdownTilMinuteInterval","getSeconds","getMilliseconds","$nextTick","$cms","nav","splice","ceil","length","setTimeout","setInterval"],"sourceRoot":"","sources":["/Users/rebj/Sites/staging-iyd/src/components/HeaderNav.vue"],"sourcesContent":["<template>\n  <div :class=\"`nav ${navColor}`\" id=\"nav\">\n    <div class=\"languages\">\n      <ul>\n        <li class=\"active\">\n          EN\n        </li>\n        <li>\n          FR\n        </li>\n        <li>\n          한국어\n        </li>\n        <li>\n          中文\n        </li>\n      </ul>\n    </div>\n    <div class=\"scrollbar\" ref=\"scrollbar\">\n      <GlowSphere src=\"../assets/glow-sphere.svg\" class=\"scroll-handle\" :color=\"navColor === 'navDark' ? `#1B2227` : `white`\"/>\n    </div>\n    <div :class=\"`hamburger ${showNav ? `blue` : ``}`\" id=\"hamburgerMenu\">\n      <div class=\"line top\"></div>\n      <div class=\"line mid\"></div>\n      <div class=\"line bot\"></div>\n    </div>\n    <transition :key=\"hour+minute\" appear>\n            <p :class=\"`time ${showNav ? `blue` : ``}`\">\n              <TimeSun class=\"sun\" v-show=\"hour < 18\" :color=\"showNav ? `#1B2227` : ``\"></TimeSun>\n              <TimeMoon class=\"sun\" v-show=\"hour > 18\" :color=\"showNav ? `#1B2227` : ``\"></TimeMoon>\n              <span v-html=\"hour\"></span><span>:</span><span v-html=\"minute\"></span>\n            </p>\n          </transition>\n    <div class=\"desktop-nav\">\n      <ul class=\"menuleft\">\n        <li v-for=\"(item, i) in menuleft\" :key=\"i\" class=\"menuitemleft\">\n          <router-link :to=\"item.link\">{{ item.text }}</router-link>\n        </li>\n      </ul>\n      <li class=\"logo\">\n          <router-link to=\"/\">\n            <!-- <img src=\"../assets/IYD-White-Small.svg\"/> -->\n            <IYDLogo></IYDLogo>\n          </router-link>\n        </li>\n      <ul>\n        <li v-for=\"(item, i) in menuright\" :key=\"i\" class=\"menuitemright\">\n          <router-link :to=\"item.link\">{{ item.text }}</router-link>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport TimeSun from './TimeSun.vue';\nimport { gsap } from \"gsap\";\nimport { toRaw } from 'vue';\nexport default {\n  name: 'HeaderNav',\n  components: {\n    TimeSun\n  },\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    },\n    showNav: {\n      type: Boolean,\n      default: false\n    },\n    navColor: {\n      type: String,\n      default: \"darkNav\"\n    },\n    clickEvents: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      // let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      document.getElementsByClassName(\"scroll-handle\")[0].style = `transform: translateY(${scrollPos * ((this.scrollBarHeight) / this.scrollLimit)}px) translateX(-50%)`;\n    },\n    clickEvents(e) {\n      this.scroller(e);\n    },\n    showNav(showNav) {\n      if (showNav) {\n        this.hamburgerAnimate();\n      } else {\n        toRaw(this.timeline).reverse();\n      }\n    },\n    // navColor(e) {\n    //   console.log(e);\n    // }\n  },\n  methods: {\n    scroller(e) {\n      // console.log(e.target.className);\n\n      if (e.target.className.includes(\"scroll-handle\")) {\n         window.addEventListener(\"mousemove\", this.scrollDrag);\n         window.addEventListener(\"mouseup\", this.removeScrollDrag);\n      }\n    },\n    scrollDrag(e) {\n      let scrollbarTop = this.$refs.scrollbar.getBoundingClientRect().top;\n      let scrollbarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n      let move = Math.min((Math.max((e.clientY - scrollbarTop), 0)), scrollbarHeight);\n      document.getElementsByClassName(\"scroll-handle\")[0].style = `transform: translateY(${move}px) translateX(-50%);`;\n      window.scrollTo(0, move * (this.scrollLimit / scrollbarHeight));\n    },\n    removeScrollDrag() {\n      window.removeEventListener(\"mousemove\", this.scrollDrag);\n    },\n    getTime() {\n      this.date = new Date();\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours().toString();\n    },\n    hamburgerAnimate() {\n      toRaw(this.timeline).restart();\n      toRaw(this.timeline).to(\".top\", {rotation: 45, duration: 1, y: 8, borderTop: \"1px solid #1B2227\"}, 0);\n      toRaw(this.timeline).to(\".mid\", {width: 0, duration: 1, borderTop: \"1px solid #1B2227\"}, 0);\n      toRaw(this.timeline).to(\".bot\", {rotation: -45, duration: 1, y: -8, borderTop: \"1px solid #1B2227\"}, 0);\n    }\n  },\n  data() {\n    return {\n      date: new Date(),\n      scrollBarHeight: 0,\n      minute:0,\n      hour:0,\n      timeline: new gsap.timeline(),\n      menuleft: [],\n      menuright: []\n    }\n  },\n  \n  mounted() {\n    \n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000 + this.date.getMilliseconds();\n    this.$nextTick(() => {\n      // this.menuleft = this.$cms.nav.split(Math.ceil($cms.nav.length / 2));\n      this.menuleft = [...this.$cms.nav].splice(0, Math.ceil(this.$cms.nav.length / 2));\n      this.menuright = [...this.$cms.nav].splice(Math.ceil(this.$cms.nav.length / 2));\n\n    })\n    setTimeout(() => {\n      this.getTime();\n      setInterval(() => {\n        this.getTime();\n      }, 60000);\n    }, countdownTilMinuteInterval)\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n@import \"../styles.scss\";\n.time {\n  color: white;\n  position: fixed;\n  z-index: 10;\n  top: 20px;\n  transition: all .5s ease .5s;\n  left: 20px;\n  margin: 0;\n  // padding-left: 20px;\n  .sun {\n    display: inline-block;\n    min-width: 40px;\n    padding-right: 5px;\n    transition: all .5s ease .5s;\n  }\n}\n.blue {\n  color: #1B2227;\n  transition: all .5s ease .5s;\n  mix-blend-mode: normal !important;\n}\n.logo {\n  // position: fixed;\n  // left: 50%;\n  // left: 140px;\n  top: 10px;\n  // transform: translateX(-50%);\n  z-index: 10;\n  // mix-blend-mode: difference;\n  display: inline-block;\n  vertical-align: middle;\n  img {\n    max-width: 130px;\n  }\n}\n.scrollbar {\n  position: fixed;\n  right: 30px;\n  height: 50vh;\n  border-right: 1px solid white;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 4;\n  // mix-blend-mode: difference;\n  .scroll-handle {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    top: -23px;\n    cursor: pointer;\n  }\n}\n.hamburger {\n  @media screen and (min-width: $mobileup) {\n    display: none;\n  }\n  position: fixed;\n  right: 20px;\n  top: 30px;\n  z-index: 10;\n  cursor: pointer;\n  // mix-blend-mode: difference;\n\n  img {\n    width: 30px;\n  }\n}\n\n.line {\n  pointer-events: none;\n  width: 30px;\n  height: 1px;\n  margin-bottom: 6px;\n  border-top: 1px solid white;\n}\n.desktop-nav {\n  @media screen and (max-width: $mobiledown) {\n    display: none;\n  }\n  position: fixed;\n  // right: 20px;\n  top: 30px;\n  z-index: 4;\n  li {\n    cursor: pointer;\n  }\n  a {\n    color: white;\n    text-decoration: none;\n    text-transform: uppercase;\n    color: $gold;\n  }\n  \nul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    li {\n      display: inline-block;\n      padding-left: 30px;\n    }\n  }\n}\n.navDark {\n  .scrollbar {\n    border-color: $darkblue;\n  }\n  a, span, .sun {\n    color: $darkblue;\n    &:after, &:before {\n      background: $darkblue;\n    }\n  }\n}\n.languages {\n  position: fixed;\n  left: 20px;\n  top: 50vh;\n  z-index: 10;\n  transform: translateY(-50%);\n  ul {\n    list-style: none;\n    padding: 0;\n    line-height: 1.5;\n  }\n  .active {\n    color: $gold;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}