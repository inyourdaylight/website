{"ast":null,"code":"import TimeSun from './TimeSun.vue';\nimport { gsap } from \"gsap\";\nimport { toRaw } from 'vue';\nexport default {\n  name: 'HeaderNav',\n  components: {\n    TimeSun\n  },\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    },\n    showNav: {\n      type: Boolean,\n      default: false\n    },\n    navColor: {\n      type: String,\n      default: \"darkNav\"\n    },\n    clickEvents: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      this.$refs.glow.style = `top: ${scrollPos * ((this.scrollBarHeight - glowSize / 2) / this.scrollLimit)}px`;\n    },\n    showNav(showNav) {\n      if (showNav) {\n        this.hamburgerAnimate();\n      } else {\n        toRaw(this.timeline).reverse();\n      }\n    }\n  },\n  methods: {\n    getTime() {\n      this.date = new Date();\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours().toString();\n    },\n    hamburgerAnimate() {\n      toRaw(this.timeline).restart();\n      toRaw(this.timeline).to(\".top\", {\n        rotation: 45,\n        duration: 1,\n        y: 8,\n        borderTop: \"1px solid #1B2227\"\n      }, 0);\n      toRaw(this.timeline).to(\".mid\", {\n        width: 0,\n        duration: 1,\n        borderTop: \"1px solid #1B2227\"\n      }, 0);\n      toRaw(this.timeline).to(\".bot\", {\n        rotation: -45,\n        duration: 1,\n        y: -8,\n        borderTop: \"1px solid #1B2227\"\n      }, 0);\n    }\n  },\n  data() {\n    return {\n      date: new Date(),\n      scrollBarHeight: 0,\n      minute: 0,\n      hour: 0,\n      timeline: new gsap.timeline()\n    };\n  },\n  mounted() {\n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000 + this.date.getMilliseconds();\n    setTimeout(() => {\n      this.getTime();\n      setInterval(() => {\n        this.getTime();\n      }, 60000);\n    }, countdownTilMinuteInterval);\n  }\n};","map":{"version":3,"mappings":"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","names":["TimeSun","gsap","toRaw","name","components","props","scrollLimit","type","Number","default","scrollPos","showNav","Boolean","navColor","String","clickEvents","Function","watch","glowSize","$refs","glow","getBoundingClientRect","height","style","scrollBarHeight","hamburgerAnimate","timeline","reverse","methods","getTime","date","Date","minute","getMinutes","toString","padStart","hour","getHours","restart","to","rotation","duration","y","borderTop","width","data","mounted","scrollbar","countdownTilMinuteInterval","getSeconds","getMilliseconds","setTimeout","setInterval"],"sourceRoot":"","sources":["/Users/rebj/Sites/staging-iyd/src/components/HeaderNav.vue"],"sourcesContent":["<template>\n  <div :class=\"`nav ${navColor}`\">\n    <div class=\"logo\">\n      <router-link to=\"/\">\n        <img src=\"../assets/IYD-White-Small.svg\"/>\n      </router-link>\n    </div>\n    <div class=\"languages\">\n      <ul>\n        <li class=\"active\">\n          EN\n        </li>\n        <li>\n          FR\n        </li>\n        <li>\n          한국어\n        </li>\n        <li>\n          中文\n        </li>\n      </ul>\n    </div>\n    <div class=\"scrollbar\" ref=\"scrollbar\">\n      <img src=\"../assets/glow-sphere.svg\" ref=\"glow\"/>\n    </div>\n    <div :class=\"`hamburger ${showNav ? `blue` : ``}`\" id=\"hamburgerMenu\">\n      <div class=\"line top\"></div>\n      <div class=\"line mid\"></div>\n      <div class=\"line bot\"></div>\n    </div>\n    <transition :key=\"hour+minute\" appear>\n            <p :class=\"`time ${showNav ? `blue` : ``}`\">\n              <TimeSun class=\"sun\" v-show=\"hour < 18\" :color=\"showNav ? `#1B2227` : ``\"></TimeSun>\n              <TimeMoon class=\"sun\" v-show=\"hour > 18\" :color=\"showNav ? `#1B2227` : ``\"></TimeMoon>\n              <span v-html=\"hour\"></span><span>:</span><span v-html=\"minute\"></span>\n            </p>\n          </transition>\n    <div class=\"desktop-nav\">\n      <ul>\n        <li v-for=\"(item, i) in $cms.nav\" :key=\"i\">\n          <router-link :to=\"item.link\">{{ item.text }}</router-link>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport TimeSun from './TimeSun.vue';\nimport { gsap } from \"gsap\";\nimport { toRaw } from 'vue';\nexport default {\n  name: 'HeaderNav',\n  components: {\n    TimeSun\n  },\n  props: {\n    scrollLimit: {\n      type: Number,\n      default: 0\n    },\n    scrollPos: {\n      type: Number,\n      default: 0\n    },\n    showNav: {\n      type: Boolean,\n      default: false\n    },\n    navColor: {\n      type: String,\n      default: \"darkNav\"\n    },\n    clickEvents: {\n      type: Function,\n      default: () => {}\n    }\n  },\n  watch: {\n    scrollPos(scrollPos) {\n      let glowSize = this.$refs.glow.getBoundingClientRect().height;\n      this.$refs.glow.style = `top: ${scrollPos * ((this.scrollBarHeight - (glowSize) / 2) / this.scrollLimit)}px`\n    },\n    showNav(showNav) {\n      if (showNav) {\n        this.hamburgerAnimate();\n      } else {\n        toRaw(this.timeline).reverse();\n      }\n    }\n  },\n  methods: {\n    getTime() {\n      this.date = new Date();\n      this.minute = this.date.getMinutes().toString().padStart(2, '0');\n      this.hour = this.date.getHours().toString();\n    },\n    hamburgerAnimate() {\n      toRaw(this.timeline).restart();\n      toRaw(this.timeline).to(\".top\", {rotation: 45, duration: 1, y: 8, borderTop: \"1px solid #1B2227\"}, 0);\n      toRaw(this.timeline).to(\".mid\", {width: 0, duration: 1, borderTop: \"1px solid #1B2227\"}, 0);\n      toRaw(this.timeline).to(\".bot\", {rotation: -45, duration: 1, y: -8, borderTop: \"1px solid #1B2227\"}, 0);\n    }\n  },\n  data() {\n    return {\n      date: new Date(),\n      scrollBarHeight: 0,\n      minute:0,\n      hour:0,\n      timeline: new gsap.timeline()\n    }\n  },\n  \n  mounted() {\n    \n    this.getTime();\n    this.scrollBarHeight = this.$refs.scrollbar.getBoundingClientRect().height;\n    let countdownTilMinuteInterval = (60 - this.date.getSeconds()) * 1000 + this.date.getMilliseconds();\n\n    setTimeout(() => {\n      this.getTime();\n      setInterval(() => {\n        this.getTime();\n      }, 60000);\n    }, countdownTilMinuteInterval)\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n@import \"../styles.scss\";\n.time {\n  color: white;\n  position: fixed;\n  z-index: 10;\n  top: 20px;\n  transition: all .5s ease .5s;\n  left: 20px;\n  margin: 0;\n  // padding-left: 20px;\n  .sun {\n    display: inline-block;\n    min-width: 40px;\n    padding-right: 5px;\n    transition: all .5s ease .5s;\n  }\n}\n.blue {\n  color: #1B2227;\n  transition: all .5s ease .5s;\n  mix-blend-mode: normal !important;\n}\n.logo {\n  position: fixed;\n  // left: 50%;\n  left: 140px;\n  top: 20px;\n  // transform: translateX(-50%);\n  z-index: 10;\n  // mix-blend-mode: difference;\n  img {\n    max-width: 130px;\n  }\n}\n.scrollbar {\n  position: fixed;\n  right: 30px;\n  height: 50vh;\n  border-right: 1px solid white;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 4;\n  mix-blend-mode: difference;\n  img {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    top: 0;\n  }\n}\n.hamburger {\n  @media screen and (min-width: $mobileup) {\n    display: none;\n  }\n  position: fixed;\n  right: 20px;\n  top: 30px;\n  z-index: 10;\n  cursor: pointer;\n  mix-blend-mode: difference;\n\n  img {\n    width: 30px;\n  }\n}\n\n.line {\n  pointer-events: none;\n  width: 30px;\n  height: 1px;\n  margin-bottom: 6px;\n  border-top: 1px solid white;\n}\n.desktop-nav {\n  @media screen and (max-width: $mobiledown) {\n    display: none;\n  }\n  position: fixed;\n  right: 20px;\n  top: 30px;\n  z-index: 4;\n  li {\n    cursor: pointer;\n  }\n  a {\n    color: white;\n    text-decoration: none;\n    text-transform: uppercase;\n    color: $gold;\n  }\n  \n  ul {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    li {\n      display: inline-block;\n      padding-left: 30px;\n    }\n  }\n}\n.navDark {\n  a, span, .sun {\n    color: $darkblue;\n    &:after, &:before {\n      background: $darkblue;\n    }\n  }\n}\n.languages {\n  position: fixed;\n  left: 20px;\n  top: 50vh;\n  transform: translateY(-50%);\n  ul {\n    list-style: none;\n    padding: 0;\n    line-height: 1.5;\n  }\n  .active {\n    color: $gold;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}